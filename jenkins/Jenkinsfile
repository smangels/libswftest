node { // <1>

	def server = Artifactory.server 'swf1'
	def uploadSpec = readFile 'artifactory.spec'

    stage('Build') { // <2>
        checkout scm // everything starts with beautiful source code
        sh 'rm -rf build'   // just to ensure that subsequent build step will fail
        try {
            sh 'mkdir build && cd build && cmake .. && cmake --build .'
        }
        finally {
            echo "Finishing build step"
        }
    }
    stage('Test') {
        sh 'ls build/src/libswftest.a'  // check whether library exists

    }
    stage('Deploy') {
        // upload artifacts to Artifactory using ID:"swf1"
        def buildInfoUpload = server.upload spec:uploadSpec

        // set current software revision as environment variable for the node
        env.SW_REVISION = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
        env.SW_FETCH_URL = sh(returnStdout: true, script: 'git remote show origin | grep "Fetch URL" | sed -e "s/.*: \(.*\)$/\1/g"').trim()

        // collect environment variables
        buildInfoUpload.env.collect()

        // enable build retention, the library is just for test purposes
        buildInfoUpload.retention maxBuilds: 3
        buildInfoUpload.retention maxDays: 10
        buildInfoUpload.retention deleteBuildArtifacts: true

        // publish the build information
        server.publishBuildInfo buildInfoUpload

        println 'succesfully uploaded artifacts'
    }
}